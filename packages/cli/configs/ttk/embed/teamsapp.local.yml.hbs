# yaml-language-server: $schema=https://aka.ms/teams-toolkit/1.0.0/yaml.schema.json
#
# The teamsapp.local.yml composes automation tasks for Teams Toolkit when running locally.
# This file is used when running Start Debugging (F5) from Visual Studio Code or with the TeamsFx CLI commands.
# i.e. `teamsfx provision --env local` or `teamsfx deploy --env local`.
#
# You can customize this file. Visit https://aka.ms/teamsfx-v5.0-guide for more info about Teams Toolkit project files.
version: 1.0.0

environmentFolderPath: ./env

# Defines what the `provision` lifecycle step does with Teams Toolkit.
# Runs first during Start Debugging (F5) or run manually using `teamsfx provision --env local`.
provision:
  - uses: aadApp/create
    with:
      # Note: when you run aadApp/update, the Microsoft Entra app name will be updated
      # based on the definition in manifest. If you don't want to change the
      # name, make sure the name in Microsoft Entra manifest is the same with the name
      # defined here.
      name: {{ toPascalCase name }}
      # If the value is false, the action will not generate client secret for you
      generateClientSecret: true
      # Authenticate users with a Microsoft work or school account in your
      # organization's Microsoft Entra tenant (for example, single tenant).
      signInAudience: AzureADMultipleOrgs
    # Write the information of created resources into environment file for the
    # specified environment variable(s).
    writeToEnvironmentFile:
      clientId: BOT_ID
      # Environment variable that starts with `SECRET_` will be stored to the
      # .env.{envName}.user environment file
      clientSecret: SECRET_BOT_PASSWORD
      objectId: AAD_APP_OBJECT_ID
      tenantId: AAD_APP_TENANT_ID
      authority: AAD_APP_OAUTH_AUTHORITY
      authorityHost: AAD_APP_OAUTH_AUTHORITY_HOST

  # Automates the creation of a Teams app registration and saves the App ID to an environment file.
  - uses: teamsApp/create
    with:
        name: {{ toPascalCase name }}$\{{APP_NAME_SUFFIX}}
    writeToEnvironmentFile:
        teamsAppId: TEAMS_APP_ID

  # Automates the creation and configuration of a Bot Framework registration which is required for a bot.
  # This configures the bot to use the Azure AD app registration created in the previous step.
  # Teams Toolkit automatically creates a local Dev Tunnel URL and updates BOT_ENDPOINT when debugging (F5).
  - uses: botFramework/create
    with:
        botId: $\{{BOT_ID}}
        name: {{ toPascalCase name }}
        messagingEndpoint: $\{{BOT_ENDPOINT}}/api/messages
        description: ''
        channels:
            - name: msteams
            
  - uses: aadApp/update
    with:
      # This task sets the SPA redirect URI order to enable Nested App Authentication (NAA) for the embed app.
      # Relative path to this file. Environment variables in manifest will
      # be replaced before apply to Microsoft Entra app.
      manifestPath: ./aad.manifest.json
      outputFilePath: ./build/aad.manifest.$\{{TEAMSFX_ENV}}.json

  # Optional: Automates schema and error checking of the Teams app manifest and outputs the results in the console.
  - uses: teamsApp/validateManifest
    with:
        manifestPath: ./appPackage/manifest.json

  # Automates the creation of a Teams app package (.zip).
  - uses: teamsApp/zipAppPackage
    with:
        manifestPath: ./appPackage/manifest.json
        outputZipPath: ./appPackage/build/appPackage.$\{{TEAMSFX_ENV}}.zip
        outputJsonPath: ./appPackage/build/manifest.$\{{TEAMSFX_ENV}}.json

  # Automates updating the Teams app manifest in Teams Developer Portal using the App ID from the manifest file.
  # This action ensures that any manifest changes are reflected when launching the app again in Teams.
  - uses: teamsApp/update
    with:
        # Relative path to this file. This is the path for built zip file.
        appPackagePath: ./appPackage/build/appPackage.$\{{TEAMSFX_ENV}}.zip

# Defines what the `deploy` lifecycle step does with Teams Toolkit.
# Runs after `provision` during Start Debugging (F5) or run manually using `teamsfx deploy --env local`.
deploy:
  # Install any dependencies and build the web app using NPM
  - uses: cli/runNpmCommand
    name: install dependencies
    with:
        args: install --no-audit --workspaces=false
  # Provides the Teams Toolkit .env file values to the apps runtime so they can be accessed with `process.env`.
  - uses: file/createOrUpdateEnvironmentFile
    with:
        target: ./.env
        envs:
          PORT: 3978
          CLIENT_ID: $\{{BOT_ID}}
          CLIENT_SECRET: $\{{SECRET_BOT_PASSWORD}}
